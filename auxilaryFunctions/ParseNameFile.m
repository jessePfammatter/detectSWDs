function [F varargout] = ParseNameFile(namefile)% F = ParseNameFile(namefile);% % Parse a list of path/filenames and organize for subsequent analysis of the specified files% % NAMEFILE is a text file containing a bunch of strings containing full path & filenames,% 	such as those created by dragging a file icon from the MacOS Finder onto an open Matlab text window, or onto BBEdit or TextWrangler.%     These file identifiers point to disk locations of data files to be analyzed as a batch% 	% 	Lines starting with '%$' are interpreted as the first line of a new "CATEGORY", and text in that line is stored % 	in the "categoryname" field of output struct F.% % 	Lines starting with '%#' are interpreted as a numerical identifier associated with that category % 	(e.g., to be parsed using str2num(), "1/4" would yield 0.25, etc), and text in that line is stored % 	in the "categorynumerical" field of output struct F. These numbers are intended for use during subsequent plotting of % 	collated data.% %   Lines starting with '%!' are interpreted as the first line of a new "ITEM" (a child of a category). %   This line should contain a unique alphanumeric identifier of this%   specific item.% 	% 	Only 1 '%$' and '%#' are allowed per "category", and only one '%!' is allowed per "item" (new ones will re-write old ones).% % 	Lines starting with '%' (i.e., Matlab comment lines) are sequentially recorded % 		into a "comment" field for the appropriate category or item, depending on whether the occur after a '%$' or a '%!'.%%   Lines starting with '@' contain lists of experimental parameters to be%   used in subsequent analysis. The FIRST entry should be a valid name of%   a matlab cell array that will be created, and populated with the%   remaining entries. It will end up stored in the ItemPars field of F.%   For example, for category x and item y, the line%       %@ Protocol.ArrayNum        1       2       3       4%   would cause the cell array ArrayNum to be stored in F(x).ItemPars{y}.Protocol% % 	EVERY NON-BLANK LINE that does not start with one of the above is interpreted as a file/pathname, which may choke the script if it isn't.% 	% 	Blank lines are ignored.%     BUT AVOID MAKING NAMEFILES WITH LEADING SPACES OR TABS, etc, AND MAKE%     SURE THAT THEY ARE SAVED IN MAC FORMAT%  % F is a multi-element struct, with fields:% 	p 					(pathname - of each data file (item) named in the namefile)% 	f 					(filename - of each data file (item) named in the namefile)%   namefile            (the namefile that was parsed to create the struct - only present in F(1))%   categoryname		(category name)%   categorynumerical	(obsolete - numerical category identifier)%   categorycomments    (comments for this category)%   generalcomments		(comments made before the first category begins, stored in F(1).generalcomments)%   itemname            (the name of the item, e.g., Date or filename)%   itemcomments        (comments associated with this item)%   itemparams          (used internally - experimental parameters - the first entry is a variable name to be created during parsing, the other entries are variable values)%   ItemPars            (metadata - experimental parameters - the first entry is a variable name to be created during parsing, the other entries are variable values)%   fileparams          (obsolete - parameters associated with the data in the item - 1:N, where N depends on how the user writes them in the NAMEFILE)%   summary             (a prettified listing of the struct contents, suitable for printing and sticking in a log book, or framing and hanging on a wall)%   INFO                Info on all expts, arranged as a searcheable cell array  - only present in F(1)%                           Use  SearchNameFile() to search for experiments using specific criteria.% ****   % Matt Jones, 2007 - adapted from parsefilenames.m% Matt Jones, 2011 - revised to be more flexible with multichannel data% Matt Jones, 2016 - Revised again to be simpler and ideally more flexible.% ****   % % Example:%   Namefile.m contains the following:% % % This is just a general comment about the whole analysis:% % Multichannel recordings from thalamocortical slices from mice PRIOR and AFTER L655,708 application % % % %$ L655,708 Expts% % This line is a comment abut this category% % %!Exp2-21-11-1% % This line is a comment about this item. The lines BELOW are lists of analysis parameters (metadata).% %@ ArrayNum        1       2       3       4                  % %@ Area            Thal    Ctx     Ctx     Thal    % %@ AnimalNum       1       1       1       1         % %@ AnimalType      RR      RR      RR      RR% %@ SolnTimes       0       59      130% %@ SolnType        LowMg   L655    LowMg% % The line below is the actual data file to be analysed% /Users/kpmangan/Desktop/CatCAs/2-21-11-WT1/2-21-11-WT1-CatCA.mat%% Prompt for a namefile if not passed as an argumentif nargin == 0   % cd('/Users/laura/Desktop/Data/Analysis/Input_Output')	[f, p] = uigetfile('*.*', 'Select the  namefile');    namefile = [p f];    path = p;endif nargin == 1    [path, name, ext] = fileparts(namefile);end%% Read the namefile and parse the various fieldsclear F; F(1).p = ''; F(1).f = '';F.namefile = namefile;fid = fopen(namefile,'r');categorynum 	= 0;itemnum 		= 0;F(1).categorycomments = '';F(1).generalcomments = '';while 1	f = fgetl(fid);%     disp(f)	if (f == -1) ; break;  end	    f = fliplr( deblank( fliplr( deblank( f ) ) ) );    % Remove leading and trailing whitespace	quotes 		= findstr(f, char(39));                 % strip single quotes	f(quotes) 	= [];		if ~isempty(f)		if strcmp(f(1), '%')			if length(f) < 2; f(2) = ' '; end			switch f(2)				case '$'    % Category					categorynum = categorynum + 1;					itemnum = 0;					F(categorynum).categoryname = f(3:end);                    F(categorynum).categorynumerical = [];				case '#'    % Category numerical ID - obsolete					F(categorynum).categorynumerical = f(3:end);                case '!'    % Item                    itemnum = itemnum + 1;                    paramnum = 0;                    F(categorynum).itemname{itemnum}    = f(3:end);                    F(categorynum).itemcomments{itemnum}    = [];                    F(categorynum).itemparams{itemnum}      = [];               case '@'     % Metadata                    paramnum = paramnum + 1;                    dummy = f(3:end);                    C = textscan(dummy, '%s');                    C = cat(2, C{:}');                    comm = C{1};                    pars = C(2:end);                    for p = 1:length(pars)                        eval( ['F(categorynum).itemparams{itemnum}.' comm '{' num2str(p) '}=' 'char(pars{' num2str(p) '});'] )                    end                                        F(categorynum).itemparams{itemnum}.param{paramnum} = dummy;                    F(categorynum).ItemPars{itemnum} = F(categorynum).itemparams{itemnum};                    F(categorynum).ItemPars{itemnum} = rmfield(F(categorynum).itemparams{itemnum}, 'param');				otherwise 					if categorynum == 0						F(1).generalcomments = strvcat(F(1).generalcomments, f);                    elseif itemnum == 0						F(categorynum).categorycomments = strvcat(F(categorynum).categorycomments, f);                    else 						F(categorynum).itemcomments{itemnum} = strvcat(F(categorynum).itemcomments{itemnum}, f);					end            end % switch f(2)				        else            %           NOTE: The new Matlab does not understand ":" as a correct file or path separator (idiots). %           Need to convert all ":" to "/".            f(findstr(f, ':')) = '/';            			seps 	= findstr(f, '/');%              disp(f)%              disp(seps)%              disp([size(seps) numel(seps)])%           NOTE: The new Matlab does not understand that the FULL pathname includes the device name (fucking idiots). %           So we need to strip that part off.            f = f(seps(1):end);			Sp 		= f(1:seps(end));			Sf		= f(seps(end)+1:end);			F(categorynum).p{itemnum} = Sp;							F(categorynum).f{itemnum} = Sf;				                 end % strcmp(f(1), '%')	end	%~isempty(f)end % while 1fclose(fid);%% Create a prettified text summary of the namefile (stored in F(1).summary)fid2 = fopen(strcat(path, 'temp.txt'), 'w');    fprintf(fid2, '%s\n', '**** PARSED FROM NAMEFILE ****');    fprintf(fid2, '%s\n\n', [char(9) namefile ]);    fprintf(fid2, '%s\n', ['General Comments:']);      for c = 1:size(F(1).generalcomments, 1)        fprintf(fid2, '%s\n', [char(9) F(1).generalcomments(c,:)]);    end    fprintf(fid2, '%s\n', '');    for categorynum = 1:length(F)        fprintf(fid2, '%s\n', '___________________________________');        fprintf(fid2, '%s\n', ['Category #' num2str(categorynum)]);        fprintf(fid2, '\t%s\n', [strtrim(F(categorynum).categoryname)]);        for c = 1:size(F(categorynum).categorycomments, 1)            fprintf(fid2, '%s\n', [char(9) F(categorynum).categorycomments(c,:)]);        end    	for itemnum = 1:length(F(categorynum).f)            fprintf(fid2, '%s\n', '');            fprintf(fid2, '%s\n', [char(9) 'Item #' num2str(itemnum)]);            fprintf(fid2, '\t\t%s\n', [strtrim(F(categorynum).itemname{itemnum})]);            fprintf(fid2, '%s\n', [char(9) 'data source : ' F(categorynum).p{itemnum}  F(categorynum).f{itemnum} ]);            for c = 1:size(F(categorynum).itemcomments{itemnum}, 1)                fprintf(fid2, '%s\n', [char(9) char(9) F(categorynum).itemcomments{itemnum}(c,:)] );            end            fnames = fieldnames( F(categorynum).ItemPars{itemnum} );            fvals = struct2cell(F(categorynum).ItemPars{itemnum});            fprintf(fid2, '%s\n', [char(9) 'metadata : ']);            for fn = 1:length( fnames )                len = length(fvals{fn})+2;                fmt = [repmat('\t\t%s', 1, len) '\n'];                str = strjoin( [fnames{fn} fvals{fn}], ['\t\t'] );                fprintf(fid2, fmt, str );                fprintf(fid2, '%s\n', '' );            end                 end    end    fprintf(fid2, '%s\n', '**** DONE ****');fclose(fid2);F(1).summary = [];fid3 = fopen(strcat(path, 'temp.txt'));dr = fread(fid3);fclose(fid3);F(1).summary = setstr(dr');delete(strcat(path, 'temp.txt'));%%  Enumerate all the different experimental conditionslabels = {'UniqueID', 'Cat#', 'Item#', 'CatName', 'ItemName', 'ParamName', 'ParamIndx', 'ParamValue'};dummy = {};count = 1;for catnum = 1:length(F)    for itemnum = 1:length(F(catnum).itemname)        paramnames = fieldnames(F(catnum).ItemPars{itemnum});        for paramnum = 1:length(paramnames)            paramvals = eval(['F(catnum).ItemPars{itemnum}.' paramnames{paramnum}]);            for valnum = 1:length(paramvals)                dummy{count, 1} = count;                  dummy{count, 2} = catnum;                  dummy{count, 3} = itemnum;                dummy{count, 4} = F(catnum).categoryname;                dummy{count, 5} = F(catnum).itemname{itemnum};                            dummy{count, 6} = paramnames{paramnum};                                dummy{count, 7} = valnum;                dummy{count, 8} = paramvals{valnum};                count = count+1;            end        end        endend    F(1).INFO.tablelist = dummy;F(1).INFO.labels = labels;%%% varargout{1} = CONDITIONS;varargout{1} = 'CONDITIONS variable should go here';assignin('base', 'F', F);
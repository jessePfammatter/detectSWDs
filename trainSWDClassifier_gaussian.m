function [trainedClassifier, validationAccuracy_mean, validationAccuracy_std] = trainSWDClassifier_gaussian(trainingData, costValue, boxConstraint, kernelScale)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: a table containing the same predictor and response
%       columns as imported into the app.
%
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
%
%      validationAccuracy: a double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 01-Feb-2018 18:56:44


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'sixHz_mean', 'sixHz_std', 'sixHz_max', 'inBetween_mean', 'inBetween_std', 'inBetween_max', 'harmonic_mean',  'harmonic_std', 'harmonic_max',  'higherFreq_mean', 'higherFreq_std', 'higherFreq_max'};
predictors = inputTable(:, predictorNames);
response = inputTable.labels;

% Data transformation: Select subset of the features
% This code selects the same subset of features as were used in the app.
includedPredictorNames = predictors.Properties.VariableNames([true true true true true true true true true true true true]); 
%includedPredictorNames = predictors.Properties.VariableNames([true true true false false false true true true false false false]); % excluding some variables to see if this changes optimization.

predictors = predictors(:,includedPredictorNames);

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
classificationSVM = fitcsvm(...
    predictors, ...
    response, ...
    'KernelFunction', 'gaussian', ...
    'PolynomialOrder', [], ...
    'KernelScale', kernelScale, ...
    'BoxConstraint', boxConstraint, ...
    'Standardize', false, ...
    'ClassNames', [1; 2], ...
    'Cost', [0 1; costValue 0], ...
    'RemoveDuplicates', true);
    
%     'CrossVal', 'on',...
%     'Kfold', 10,...


% convert to probability stuff.. not sure what is going to happen here.
%classificationSVM = fitSVMPosterior(classificationSVM); % okay I'm not sure entirely whats going on here..

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
featureSelectionFcn = @(x) x(:,includedPredictorNames);
svmPredictFcn = @(x) predict(classificationSVM, x);
trainedClassifier.predictFcn = @(x) svmPredictFcn(featureSelectionFcn(predictorExtractionFcn(x)));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = predictorNames;
trainedClassifier.ClassificationSVM = classificationSVM;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2017b.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.

% Perform cross-validation
for iii = 1:10
    partitionedModel = crossval(trainedClassifier.ClassificationSVM, 'KFold', 5);
    validationAccuracy(iii) = 1 - kfoldLoss(partitionedModel, 'LossFun', 'classiferror');
end

validationAccuracy_mean = mean(validationAccuracy);
validationAccuracy_std = std(validationAccuracy);
